/*.gallery {
  width: 50%;
  border: 5px solid red;
}

img {
  width: 100%;
  padding: 5px;
  border: 5px solid blue;
}*/

* {
/*
box-sizing: content-box;

The box-sizing property is used to set this behavior. By default, 
the content-box model is used. With this model, when an element has a 
specific width, that width is calculated based only on the element's content. 
Padding and border values get added to the total width, so the element grows 
to accommodate these values.*/

box-sizing: border-box;
/*The border-box sizing model does the opposite of content-box. The total width 
of the element, including padding and border, will be the explicit width set. 
The content of the element will shrink to make room for the padding and border.*/
}

.gallery img { 
  width: 100%;
  max-width: 350px;
  height: 300px;
  object-fit: cover; /*This will tell the image to fill the img container while 
  maintaining aspect ratio, resulting in cropping to fit.*/

  gap: 16px; /*The gap CSS shorthand property sets the gaps, also known as gutters, 
  between rows and columns. The gap property and its row-gap and column-gap 
  sub-properties provide this functionality for flex, grid, and multi-column layout.
   You apply the property to the container element.*/
  border-radius: 10px; 
} 
/*This CSS selector .gallery img targets all <img> elements that are inside an 
  element with the class gallery.*/

body {
  margin: 0;
  font-family: sans-serif;
  background-color: #f5f6f7;
}

.header {
    text-align: center;
    text-transform: uppercase;
    padding: 32px;
    background-color: #0a0a23;
    color: #fff;
    border-bottom: 4px solid #fdb347;
}

.gallery {
    display: flex; /*The flex value for the display property turns the element into a flex container*/
    flex-direction: row; /*(default): horizontal axis with flex items from left to right*/
    flex-wrap: wrap; /*Allows flex items to wrap onto multiple lines*/
    justify-content: center; /*Centers flex items along the main axis (horizontal axis in this case)*/
    align-items: center; /*Centers flex items along the cross axis (vertical axis in this case)*/
    padding: 20px 10px;
    max-width: 1400px;
    margin: 0 auto;
} 

.gallery::after {
    content: ""; /*empty string to add empty element*/
    width: 350px;
} /*The ::after pseudo-element creates an element that is the last child of the selected 
element. You can use it to add an empty element after the last image. If you give it 
the same width as the images it will push the last image to the left when the gallery 
is in a two-column layout. Right now, it is in the center because you set 
justify-content: center on the flex container.*/